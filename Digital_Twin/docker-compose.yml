version: "3.8"

# Define a base configuration for celery services to reduce repetition
x-celery-base: &celery-base
  build:
    context: .
    dockerfile: Dockerfile
  restart: unless-stopped
  env_file:
    - ./.env # Load credentials and other secrets from .env file
  environment:
    - FLASK_ENV=production
    - CELERY_BROKER_URL=redis://redis:6379/0
    - CELERY_RESULT_BACKEND=redis://redis:6379/0
    # The DATABASE_URL is now loaded from the .env file
  volumes:
    - ./DATABASE:/app/DATABASE
    - ./LOGS:/app/LOGS
    - ./SECURITY:/app/SECURITY
    - ./REPORTS:/app/REPORTS
    - ./CONFIG:/app/CONFIG
    - ./ANALYTICS:/app/ANALYTICS # Note: ANALYTICS is mounted for celery but not the main app
  depends_on:
    - redis
    - postgres
  networks:
    - digital_twin_network

services:
  # Main Digital Twin Application
  digital-twin-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digital_twin_app
    restart: unless-stopped
    expose:
      - "5000" # Expose port only to the internal network
    env_file:
      - ./.env # Load credentials from .env file
    environment:
      - FLASK_ENV=production
      # DATABASE_URL is now loaded via env_file
      - REDIS_URL=redis://redis:6379/0
      - ENCRYPTION_KEY_PATH=CONFIG/encryption.key
    volumes:
      - ./DATABASE:/app/DATABASE
      - ./LOGS:/app/LOGS
      - ./SECURITY:/app/SECURITY
      - ./REPORTS:/app/REPORTS
      - ./CONFIG:/app/CONFIG
    depends_on:
      - redis
      - postgres
    networks:
      - digital_twin_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: digital_twin_redis
    restart: unless-stopped
    expose:
      - "6379" # Expose port only to the internal network
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - digital_twin_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    container_name: digital_twin_postgres
    restart: unless-stopped
    env_file:
      - ./.env # All environment variables (POSTGRES_DB, etc.) are loaded from here
    expose:
      - "5432" # Expose port only to the internal network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./DATABASE/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - digital_twin_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"] # Use $$ to escape $ for shell
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  celery-worker:
    <<: *celery-base # Inherit from the base celery configuration
    container_name: digital_twin_celery
    # FIXED: Corrected the Python module path
    command: celery -A Digital_Twin.WEB_APPLICATION.enhanced_flask_app_v2.celery worker --loglevel=info

  # Celery Beat for scheduled tasks
  celery-beat:
    <<: *celery-base # Inherit from the base celery configuration
    container_name: digital_twin_beat
    # FIXED: Corrected the Python module path
    command: celery -A Digital_Twin.WEB_APPLICATION.enhanced_flask_app_v2.celery beat --loglevel=info

  # NEW: MQTT Ingestor service
  mqtt_ingestor:
    <<: *celery-base # Inherit from the base celery configuration
    container_name: digital_twin_mqtt_ingestor
    # This service needs to connect to mosquitto as well
    depends_on:
      - redis
      - postgres
      - mosquitto
    # Runs the MQTT ingestor script (path based on your project structure)
    command: python -u Digital_Twin/AI_MODULES/mqtt_ingestor.py

  # Nginx reverse proxy (The public-facing entrypoint)
  nginx:
    image: nginx:alpine
    container_name: digital_twin_nginx
    restart: unless-stopped
    ports:
      # These are the only ports exposed to the host
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro # Mount SSL certs as read-only
    depends_on:
      - digital-twin-app
      - grafana
      - prometheus
    networks:
      - digital_twin_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: digital_twin_prometheus
    restart: unless-stopped
    expose:
      - "9090" # Expose port only to the internal network (for Nginx)
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      # UPDATED: Use a variable from .env for the domain name
      - '--web.external-url=https://${DOMAIN_NAME:-localhost}/prometheus'
    networks:
      - digital_twin_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: digital_twin_grafana
    restart: unless-stopped
    expose:
      - "3000" # Expose port only to the internal network (for Nginx)
    env_file:
      - ./.env # Load Grafana admin password from .env file
    environment:
      # UPDATED: Use a variable from .env for the root URL
      - GF_SERVER_ROOT_URL=https://n-localhost/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - digital_twin_network

  # InfluxDB for time series data
  influxdb:
    image: influxdb:2.0-alpine
    container_name: digital_twin_influxdb
    restart: unless-stopped
    env_file:
      - ./.env # Load InfluxDB credentials from .env file
    expose:
      - "8086" # Expose port only to the internal network
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - digital_twin_network

  # MQTT Broker for IoT communication
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: digital_twin_mqtt
    restart: unless-stopped
    ports:
      # These ports must be public for IoT devices
      - "1883:1883" # Standard MQTT
      - "9001:9001" # MQTT over WebSockets
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - digital_twin_network

networks:
  digital_twin_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local