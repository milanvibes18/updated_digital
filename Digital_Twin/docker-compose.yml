

services:
  # Main Digital Twin Application
  digital-twin-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digital_twin_app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///DATABASE/health_data.db
      - REDIS_URL=redis://redis:6379/0
      - ENCRYPTION_KEY_PATH=CONFIG/encryption.key
    volumes:
      - ./DATABASE:/app/DATABASE
      - ./LOGS:/app/LOGS
      - ./SECURITY:/app/SECURITY
      - ./REPORTS:/app/REPORTS
      - ./CONFIG:/app/CONFIG
    depends_on:
      - redis
      - postgres
    networks:
      - digital_twin_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: digital_twin_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - digital_twin_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: digital_twin_postgres
    environment:
      - POSTGRES_DB=digital_twin
      - POSTGRES_USER=dt_user
      - POSTGRES_PASSWORD=secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./DATABASE/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - digital_twin_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dt_user -d digital_twin"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digital_twin_celery
    command: celery -A WEB_APPLICATION.enhanced_flask_app_v2.celery worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./DATABASE:/app/DATABASE
      - ./LOGS:/app/LOGS
      - ./SECURITY:/app/SECURITY
      - ./ANALYTICS:/app/ANALYTICS
    depends_on:
      - redis
      - postgres
    networks:
      - digital_twin_network
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digital_twin_beat
    command: celery -A WEB_APPLICATION.enhanced_flask_app_v2.celery beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./DATABASE:/app/DATABASE
      - ./LOGS:/app/LOGS
      - ./SECURITY:/app/SECURITY
    depends_on:
      - redis
    networks:
      - digital_twin_network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: digital_twin_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - digital-twin-app
    networks:
      - digital_twin_network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: digital_twin_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - digital_twin_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: digital_twin_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - digital_twin_network
    restart: unless-stopped

  # InfluxDB for time series data
  influxdb:
    image: influxdb:2.0-alpine
    container_name: digital_twin_influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=digital_twin
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin123
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - digital_twin_network
    restart: unless-stopped

  # MQTT Broker for IoT communication
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: digital_twin_mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - digital_twin_network
    restart: unless-stopped

networks:
  digital_twin_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local