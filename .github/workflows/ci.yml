# .github/workflows/ci.yml
name: Backend and Frontend CI

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master", "develop" ]

jobs:
  #-------------------------
  # Frontend Build & Test
  #-------------------------
  frontend-build-test:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Run ESLint
        # Assuming 'lint:js' runs eslint
        run: npm run lint:js

      - name: Run Stylelint
        # Assuming 'lint:css' runs stylelint
        run: npm run lint:css

      - name: Run Frontend Tests
        # The '-- --run' is often needed to pass the 'run' flag to vitest
        run: npm run test -- --run

      - name: Build Frontend Project
        run: npm run build

      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/ # Adjust path if your build output is different

  #-------------------------
  # Backend Lint & Test
  #-------------------------
  backend-lint-test:
    name: Lint & Test Backend
    runs-on: ubuntu-latest
    needs: frontend-build-test # Optional: Run after frontend if needed

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Match your project's Python version
          cache: 'pip'

      - name: Install Backend Dependencies
        run: |
          pip install --upgrade pip
          pip install -r Digital_Twin/requirements.txt
          pip install pytest pytest-cov black flake8 # Install testing/linting tools

      - name: Lint with Flake8
        run: flake8 Digital_Twin/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check Formatting with Black
        run: black --check Digital_Twin/

      - name: Run Backend Tests with Coverage
        run: pytest Digital_Twin/TESTS/ --cov=Digital_Twin --cov-report=xml --cov-report=term-missing

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: coverage.xml # Standard path for pytest-cov XML report

  #-------------------------
  # Docker Build & Push (Optional - uncomment if needed)
  #-------------------------
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [frontend-build-test, backend-lint-test] # Run after tests pass
    # Only run on pushes to specific branches (e.g., main)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Add steps for Docker login (e.g., Docker Hub, GHCR)
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Download frontend build artifact (built in previous job)
      - name: Download Frontend Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          # Destination path MUST match the path expected by Dockerfile COPY command
          path: Digital_Twin/WEB_APPLICATION/static

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Build from the root context
          dockerfile: Digital_Twin/Dockerfile # Specify the Dockerfile path
          push: true
          tags: your-dockerhub-username/digital-twin:latest # Replace with your image name/tag
          cache-from: type=gha
          cache-to: type=gha,mode=max